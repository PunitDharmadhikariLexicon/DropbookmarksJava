package com.udemy.resources;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.persistence.*;

/**
 * A class to store user's data.
 *
 * @author Dmitry Noranovich
 */
@Entity
@Table(name = "users")
@NamedQueries({
        @NamedQuery(name = "com.udemy.resources.User.findAll",
                query = "select u from User u"),
        @NamedQuery(name = "com.udemy.resources.User.findByUsernamePassword",
                query = "select u from User u "
                        + "where u.username = :username "
                        + "and u.password = :password")
})
public class User {

    /**
     * The unique identifier of an entity. Used to store the auto-generated by
     * RDBMS primary key.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    /**
     * The name of the user. The @Column annotation is not required here as the
     * name of the field is the same as the name of the column. It's necessary
     * only if the names differ.
     */
    @Column(name = "username")
    private String username;

    /**
     * The password of the user.
     */
    private String password;
    /**
     * The collection of bookmarks owned by the user.
     */
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
    private List<Bookmark> bookmarks = new ArrayList<>();

    /**
     * A required no-argument constructor.
     */
    public User() {
    }

    /**
     * The constructor for creating a user. Id is not passed as it's
     * auto-generated by the RDBMS.
     *
     * @param username The name of the user.
     * @param password The password of the user.
     */
    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    //Auto-generated by an IDE methods:
    //equals, hashCode, getters annd setters for all fields.
    @Override
    public int hashCode() {
        int hash = 5;
        hash = 59 * hash + (int) (this.id ^ (this.id >>> 32));
        hash = 59 * hash + Objects.hashCode(this.username);
        hash = 59 * hash + Objects.hashCode(this.password);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final User other = (User) obj;
        if (this.id != other.id) {
            return false;
        }
        if (!Objects.equals(this.username, other.username)) {
            return false;
        }
        if (!Objects.equals(this.password, other.password)) {
            return false;
        }
        return true;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public List<Bookmark> getBookmarks() {
        return bookmarks;
    }

    public void setBookmarks(List<Bookmark> bookmarks) {
        this.bookmarks = bookmarks;
    }

}